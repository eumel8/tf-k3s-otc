#!/bin/bash -xe

DEBIAN_FRONTEND=noninteractive

# disable non-working ipv6 in OTC ECS
sysctl -w net.ipv6.conf.all.disable_ipv6=1
sysctl -w net.ipv6.conf.default.disable_ipv6=1
sysctl -w net.ipv6.conf.lo.disable_ipv6=1

# install mysql-client (retry if network is not ready
for i in 1 2 3 4 5; do
  apt update && break || sleep 10;
done
apt -y upgrade
apt -y install mysql-client
for i in 1 2 3 4 5; do
  mysql -uroot -P${rds_port} -h${rds_host} -p${rds_root_password} -e "CREATE DATABASE IF NOT EXISTS ${rds_db}" && break || sleep 10;
done

# doing os hardening
# https://github.com/dev-sec/puppet-os-hardening
wget https://apt.puppetlabs.com/puppet-release-focal.deb
dpkg -i puppet-release-focal.deb || exit 1
rm -f puppet-release-focal.deb

apt update
apt install -y puppet-agent

systemctl stop puppet
systemctl disable puppet
/opt/puppetlabs/bin/puppet module install hardening-os_hardening || exit 1

cat > hardening.pp << EOF
class { 'os_hardening':
  enable_ipv4_forwarding => true,
}
EOF

/opt/puppetlabs/bin/puppet apply hardening.pp || exit 1
rm -f hardening.pp

# install k3s with MySQL backend
if [ "${k3s_version}" == "latest" ] || [ "${k3s_version}" == "stable" ]; then
  curl -svfL4 --retry 100 https://get.k3s.io | INSTALL_K3S_CHANNEL=${k3s_version} sh -s - server --datastore-endpoint="mysql://root:${rds_root_password}@tcp(${rds_host}:${rds_port})/${rds_db}"
else
  curl -svfL4 --retry 100 https://get.k3s.io | INSTALL_K3S_VERSION=${k3s_version} sh -s - server --datastore-endpoint="mysql://root:${rds_root_password}@tcp(${rds_host}:${rds_port})/${rds_db}"
fi

# install helm (3.3 wont't work on jetstack repo)
for i in 1 2 3 4 5; do
  snap install helm --channel=3.2/stable --classic && break || sleep 60;
done

export KUBECONFIG=/var/lib/rancher/k3s/server/cred/admin.kubeconfig

# install cert-manager
helm repo add jetstack https://charts.jetstack.io
helm repo update
for i in 1 2 3 4 5; do
  helm upgrade -i \
    cert-manager jetstack/cert-manager \
    --namespace cert-manager \
    --version ${cert-manager_version} \
    --wait --timeout 10m0s \
    --set installCRDs=true \
    --create-namespace && break || sleep 10;
done

# wait some time for cert-manager to be ready
sleep 30

# install helm repo
helm repo add rancher-latest https://releases.rancher.com/server-charts/latest

# install now Rancher
for i in 1 2 3 4 5; do
  helm upgrade -i rancher rancher-latest/rancher \
    --namespace cattle-system \
    --set hostname=${rancher_host}.${rancher_domain} \
    --set ingress.tls.source=letsEncrypt \
    --set letsEncrypt.email=${admin_email} \
    --set letsEncrypt.ingress.class=traefik \
    --set replicas=2 \
    --wait --timeout 10m0s \
    --create-namespace && break || sleep 60;
done
