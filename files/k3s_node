#!/bin/bash -xe

#####################################
# disable non-working ipv6 in OTC ECS
#####################################
sysctl -w net.ipv6.conf.all.disable_ipv6=1
sysctl -w net.ipv6.conf.default.disable_ipv6=1
sysctl -w net.ipv6.conf.lo.disable_ipv6=1

##################################################################
# k3s hardening kernel settings
# https://rancher.com/docs/k3s/latest/en/security/hardening_guide/
##################################################################
sysctl -w vm.panic_on_oom=0
sysctl -w vm.overcommit_memory=1
sysctl -w kernel.panic=10
sysctl -w kernel.panic_on_oops=1
sysctl -w kernel.keys.root_maxbytes=25000000


######################################################
# install mysql-client (retry if network is not ready)
######################################################
for i in 1 2 3 4 5; do
  apt-get update && break || sleep 10;
done
DEBIAN_FRONTEND=noninteractive apt-get -yq -o Dpkg::Options::="--force-confdef" upgrade
DEBIAN_FRONTEND=noninteractive apt-get -yq -o Dpkg::Options::="--force-confdef" install mysql-client

################################################
# doing os hardening
# https://github.com/dev-sec/puppet-os-hardening
################################################

wget https://apt.puppetlabs.com/puppet-release-focal.deb
dpkg -i puppet-release-focal.deb || exit 1
rm -f puppet-release-focal.deb

for i in 1 2 3 4 5; do
  apt-get update && break || sleep 10;
done
apt-get -yq install puppet-agent

systemctl stop puppet
systemctl disable puppet
/opt/puppetlabs/bin/puppet module install hardening-os_hardening || exit 1

cat > hardening.pp << EOF
class { 'os_hardening':
  enable_ipv4_forwarding => true,
}
EOF

/opt/puppetlabs/bin/puppet apply hardening.pp || exit 1
rm -f hardening.pp

##################################
# set registry proxy if configured
##################################
if [ "${k3s_registry}" != "" ]; then
mkdir -p /etc/rancher/k3s
cat > /etc/rancher/k3s/registries.yaml << EOF
mirrors:
  docker.io:
    endpoint:
      - ${k3s_registry}
EOF
fi

################################
# install k3s with MySQL backend
################################
for i in 1 2 3 4 5; do
  mysql -uroot -P${rds_port} -h${rds_host} -p${rds_root_password} -e "CREATE DATABASE IF NOT EXISTS ${rds_db}" && break || sleep 10;
done

if [ "${k3s_version}" == "latest" ] || [ "${k3s_version}" == "stable" ]; then
  curl -svfL4 --retry 100 https://get.k3s.io | INSTALL_K3S_CHANNEL=${k3s_version} sh -s - server --datastore-endpoint="mysql://root:${rds_root_password}@tcp(${rds_host}:${rds_port})/${rds_db}" --token=${token}
else
  curl -svfL4 --retry 100 https://get.k3s.io | INSTALL_K3S_VERSION=${k3s_version} sh -s - server --datastore-endpoint="mysql://root:${rds_root_password}@tcp(${rds_host}:${rds_port})/${rds_db}" --token=${token}
fi
